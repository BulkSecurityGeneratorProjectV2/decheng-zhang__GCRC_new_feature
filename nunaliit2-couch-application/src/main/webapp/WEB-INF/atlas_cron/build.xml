<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== -->
<project name="atlas-cron" default="default">
	<description>
		Scripts that should be run daily (CRON)
	</description>
	
	<property file="build.properties"/>
	<property file="user.properties"/>
	
	<property name="atlas.name" value="default"/>
	<property name="atlas.config.dir" location="/etc/nunaliit2/${atlas.name}"/>
	<property file="${atlas.config.dir}/couch.properties"/>
	<property file="${atlas.config.dir}/install.properties"/>

	<property name="updated.script.dir" location="./updated"/>

	<!--
		DO NOT CHANGE THE FOLLOWING VALUES. IF YOU FEEL
		COMPELLED TO, GO READ TASK update-cron-boot FIRST.
	-->
	<property name="cron.boot.dir" location="."/>
	<property name="cron.boot.version" value="1"/>
	
	<!-- ================================= -->
	<target
		name="default"
		depends="phase1"
		description="Run daily scripts"
		>
	
	</target>

	<!-- ================================= -->
	<target
		name="phase1"
		depends="boot-report,subversion-update,update-cron-scripts"
		description="First phase of cron scripts"
		>
		
		<!-- Continue phase 2 with updated script -->
		<ant 
			dir="${updated.script.dir}"
			target="phase2"
			inheritall="true"
			>
		</ant>
	
	</target>

	<!-- ================================= -->
	<target
		name="phase2"
		depends="maven-update,design-update,content-cron,servlet-stop,copy-war,servlet-start,update-cron-boot"
		description="Second phase of cron scripts"
		>
	
	</target>

	<!-- ================================= -->
	<target
		name="boot-report"
		description="Report current version"
		>
		
		<echo message="CRON boot: ${cron.boot.version} ${cron.boot.dir}"/>
	</target>

	<!-- ================================= -->
	<target
		name="subversion-update"
		description="Update current subversion working copy"
		>

		<exec
			dir="${cron.nunaliit.svn}"
			executable="svn"
			resultproperty="nunaliit.update.result"
			>
			<arg line="up --non-interactive --trust-server-cert --no-auth-cache ${subversion.user.option} ${subversion.password.option}"/>
		</exec>

		<exec
			dir="${cron.atlas.svn}"
			executable="svn"
			resultproperty="atlas.update.result"
			>
			<arg line="up --non-interactive --trust-server-cert --no-auth-cache ${subversion.user.option} ${subversion.password.option}"/>
		</exec>
		
		<condition property="nunaliit.update.failed" value="1">
			<not>
				<equals arg1="${nunaliit.update.result}" arg2="0"/>
			</not>
		</condition>
		<condition property="atlas.update.failed" value="1">
			<!-- Assume that atlas fails if nunaliit fails -->
			<not>
				<equals arg1="${nunaliit.update.result}" arg2="0"/>
			</not>
		</condition>
		<condition property="atlas.update.failed" value="1">
			<not>
				<equals arg1="${atlas.update.result}" arg2="0"/>
			</not>
		</condition>

	</target>

	<!-- ================================= -->
	<target
		name="update-cron-scripts"
		depends="-update-cron-scripts"
		description="Copy CRON scripts from updated repository"
		unless="nunaliit.update.failed"
		>

		<!-- Recreate updated directory -->
		<delete dir="${updated.script.dir}" failonerror="false"/>
		<mkdir dir="${updated.script.dir}"/>
		
		<copy
			todir="${updated.script.dir}"
			overwrite="true"
			>
			<fileset dir="${cron.nunaliit.svn}/nunaliit2-couch-application/src/main/webapp/WEB-INF/atlas_cron">
			</fileset>
		</copy>
	</target>

	<target
		name="-update-cron-scripts"
		description="Check before copying CRON scripts"
		if="nunaliit.update.failed"
		>

		<echo message="CRON scripts not copied because nunaliit update failed"/>
	</target>

	<!-- ================================= -->
	<target
		name="maven-update"
		depends="-maven-update"
		description="Recreate projects from source"
		unless="atlas.update.failed"
		>

		<exec
			dir="${cron.nunaliit.svn}"
			executable="mvn"
			>
			<arg line="clean"/>
		</exec>

		<exec
			dir="${cron.nunaliit.svn}"
			executable="mvn"
			>
			<arg line="install"/>
		</exec>

		<exec
			dir="${cron.atlas.svn}"
			executable="mvn"
			>
			<arg line="clean"/>
		</exec>

		<exec
			dir="${cron.atlas.svn}"
			executable="mvn"
			>
			<arg line="install"/>
		</exec>
	</target>

	<target
		name="-maven-update"
		description="Check before building"
		if="atlas.update.failed"
		>

		<echo message="Maven not run because atlas failed to update"/>
	</target>

	<!-- ================================= -->
	<target
		name="copy-war"
		depends="-copy-war"
		description="Copy updated WAR files to Jetty"
		unless="atlas.update.failed"
		>
		
		<echo message="Copying Servlet WAR File"/>

		<copy
			tofile="${servlet.home.dir}/webapps/atlas.war"
			>
			<fileset dir="${cron.atlas.svn}">
				<filename name="**/*uberwar*.war"/>
			</fileset>
		</copy>
	</target>

	<target
		name="-copy-war"
		description="Check before copying updated WAR files to Jetty"
		if="atlas.update.failed"
		>
		
		<echo message="WAR file copy aborted because atlas did not update"/>
	</target>

	<!-- ================================= -->
	<target
		name="servlet-stop"
		description="Stops Jetty"
		>
		
		<echo message="Stopping Servlet Container"/>

		<!-- Stop -->
		<exec
			executable="${atlas.config.dir}/atlas"
			>
			<arg line="${servlet.args.stop}"/>
		</exec>
	</target>

	<!-- ================================= -->
	<target
		name="servlet-start"
		description="Starts Jetty"
		>
		
		<echo message="Starting Servlet Container"/>

		<!-- Start -->
		<exec
			executable="${atlas.config.dir}/atlas"
			>
			<arg line="${servlet.args.start}"/>
		</exec>
	</target>

	<!-- ================================= -->
	<target
		name="couchdb-restart"
		description="Restart CouchDB"
		>
		
		<echo message="Restarting CouchDB"/>

		<!-- Stop -->
		<exec
			executable="${couchdb.executable}"
			>
			<arg line="${couchdb.args.stop}"/>
		</exec>
		
		<!-- Start -->
		<exec
			executable="${couchdb.executable}"
			>
			<arg line="${couchdb.args.start}"/>
		</exec>
	</target>

	<!-- ================================= -->
	<target
		name="design-update"
		description="Update the atlas design document"
		unless="atlas.update.failed"
		>

		<!-- Clean -->
		<ant
			dir="${cron.atlas.svn}"
			target="clean"
			inheritall="false"
			>
			<property name="atlas.name" value="${atlas.name}"/>
			<property name="atlas.config.dir" value="${atlas.config.dir}"/>
		</ant>

		<!-- Build and deploy -->
		<ant
			dir="${cron.atlas.svn}"
			inheritall="false"
			>
			<property name="atlas.name" value="${atlas.name}"/>
			<property name="atlas.config.dir" value="${atlas.config.dir}"/>
		</ant>

		<!-- Clean again (do not leave generated files around) -->
		<ant
			dir="${cron.atlas.svn}"
			target="clean"
			inheritall="false"
			>
			<property name="atlas.name" value="${atlas.name}"/>
			<property name="atlas.config.dir" value="${atlas.config.dir}"/>
		</ant>
	</target>

	<!-- ================================= -->
	<target
		name="content-cron"
		depends="-content-cron-report"
		description="Run cron task from atlas content"
		if="cron.content.exists"
		>

		<echo message="Running CRON job from atlas content"/>

		<!-- Clean again (do not leave generated files around) -->
		<ant
			dir="${cron.atlas.svn}/cron"
			inheritall="true"
			>
		</ant>
	</target>

	<target
		name="-content-cron-report"
		depends="-content-cron-check"
		description="Report if atlas content does not contains a CRON job"
		unless="cron.content.exists"
		>

		<echo message="Atlas content does not provide a CRON job"/>
	</target>

	<target
		name="-content-cron-check"
		description="Detect if atlas content contains a CRON job"
		>

		<available property="cron.content.exists" file="${cron.atlas.svn}/cron/build.xml"/>
	</target>

	<!-- ================================= -->
	<target
		name="update-cron-boot"
		depends="-update-cron-boot-report"
		description="Update original CRON script"
		unless="cron.boot.updateToDate"
		>
		
		<!--
			########################################################
			This is a dangerous task!
			The CRON boot should never be changed. The rational
			behind this assertion is that if something goes
			wrong in the CRON boot script, then the nigthly
			task will stop running, leaving nodes unable
			to update.
			
			Before changing the value for the cron.boot.version
			property, make sure you test this very, very, very
			thoroughly. 
			########################################################
		-->
		
		<echo message="*** UPDATING CRON BOOT ***"/>
		
		<copy
			todir="${cron.boot.dir}"
			overwrite="true"
			>
			<fileset dir=".">
				<include name="build.xml"/>
			</fileset>
		</copy>

	</target>

	<target
		name="-update-cron-boot-report"
		depends="-update-cron-boot-check"
		description="Report if CRON boot update is up-to-date"
		if="cron.boot.updateToDate"
		>
		
		<echo message="CRON boot already up to date: ${cron.boot.updateToDate}"/> 

	</target>

	<target
		name="-update-cron-boot-check"
		description="Check if CRON boot update is needed"
		>
		
		<!-- No update if the current directory is the same as the original -->
		<property name="updateCronBoot.current.dir" location="."/>
		<condition property="cron.boot.updateToDate" value="Can not update itself">
			<equals arg1="${updateCronBoot.current.dir}" arg2="${cron.boot.dir}"/>
		</condition>
		
		<!-- No update if the current version is the same -->
		<property name="updateCronBoot.current.version" value="1"/>
		<condition property="cron.boot.updateToDate" value="Not newer">
			<equals arg1="${updateCronBoot.current.version}" arg2="${cron.boot.version}"/>
		</condition>

	</target>
	
</project>
